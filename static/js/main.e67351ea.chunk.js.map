{"version":3,"sources":["grade_code.js","Card.js","Cards.js","App.js","serviceWorker.js","index.js"],"names":["data","require","_","severity","null","splice","nameAndJob","uniq","map","author","name","sort","filter","jobName","nameAndAverageSeverity","flatten","messages","job","results","nameAndMessage","ruleId","flattenDeep","message","nameAndError","nameAndSeverity","marks","reduce","x","y","length","toPrecision","module","exports","Card","percentage","this","getPercentage","100","80","60","40","20","0","Math","round","props","result","className","viewBox","class","getGrade","d","stroke-dasharray","React","Component","Cards","App","console","log","style","background","Boolean","window","location","hostname","match","ReactDOM","render","number","roll","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e67351ea.chunk.js","sourcesContent":["const data = require('./sauron-linter.json');\nconst _ = require('lodash');\nconst severity = {\n  \"brace-style\":3,\n  \"camelcase\":4,\n  \"curly\":2,\n  \"func-call-spacing\":1,\n  \"id-length\":3,\n  \"indent\":4,\n  \"max-len\":3,\n  \"max-lines\":2,\n  \"new-cap\":4,\n  \"no-empty-function\":3,\n  \"no-extra-semi\":3,\n  \"no-multi-spaces\":4,\n  \"no-multiple-empty-lines\":2,\n  \"no-return-assign\":4,\n  \"no-unused-vars\":4,\n  \"object-curly-spacing\":1,\n  \"semi\":4,                                                                                              \n  null:0\n};\nconst totalMarks = 5;\n\ndata.splice(0,100);\ndata.splice(132,1);\nconst names = _.uniq(data.map(data=> data.author.name)).sort();\nconst nameAndJob = names.map(name => ({name:name,data:data.filter(jobName => jobName.author.name === name)}));\n// const nameAndErrorCounts = nameAndJob.map(data => ({name:data.name,data:data.data.map(data=>data.job.results.errorCount)}));\n// const nameAndErrorCount = nameAndErrorCounts.map(data => ({name:data.name,errorCount:data.data.reduce((x,y)=>x+y)}));\n// const sortedNameAndErrorCount = nameAndErrorCount.sort((data1,data2)=>data1.errorCount - data2.errorCount);\nconst nameAndMessages = _.flatten(nameAndJob.map(data => ({name:data.name,messages:data.data.map(data => data.job.results.results.map(job=>job.messages))})))\nconst nameAndErrors = nameAndMessages.map(nameAndMessage => ({name:nameAndMessage.name,ruleId:_.flattenDeep(nameAndMessage.messages).map(message => message.ruleId)}));\nconst sortedNameAndErrors = nameAndErrors.map(nameAndError => ({name:nameAndError.name,ruleId:nameAndError.ruleId.sort()}));\nconst nameAndSeverity = sortedNameAndErrors.map(nameAndError => ({name:nameAndError.name,severity:nameAndError.ruleId.map(ruleId => severity[ruleId])}))\nconst nameAndAverageSeverity = nameAndSeverity.map(nameAndSeverity => ({name:nameAndSeverity.name,marks:(totalMarks-(nameAndSeverity.severity.reduce((x,y)=>x+y)/nameAndSeverity.severity.length)).toPrecision(3)}));\n\nmodule.exports = nameAndAverageSeverity;\n","import React from \"react\";\n\nclass Card extends React.Component {\n\tgetGrade() {\n\t\tconst percentage = this.getPercentage();\n\t\tlet grades = {\n\t\t\t100: \"A\",\n\t\t\t80: \"B\",\n\t\t\t60: \"C\",\n\t\t\t40: \"D\",\n\t\t\t20: \"E\",\n\t\t\t0: \"F\"\n\t\t};\n\t\treturn grades[Math.round(percentage / 20) * 20];\n\t}\n\n\tgetPercentage() {\n\t\treturn Math.round((this.props.result.marks * 100) / 5);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='card'>\n\t\t\t\t<div className='name'>{this.props.result.name}</div>\n\t\t\t\t<svg viewBox='0 0 36 36' class={`circular-chart ${this.getGrade()}`}>\n\t\t\t\t\t<path\n\t\t\t\t\t\tclass='circle-bg'\n\t\t\t\t\t\td='M18 2.0845\n\t\t\t\t\t\t\ta 15.9155 15.9155 0 0 1 0 31.831\n\t\t\t\t\t\t\ta 15.9155 15.9155 0 0 1 0 -31.831'\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tclass='circle'\n\t\t\t\t\t\tstroke-dasharray={`${this.getPercentage()},100`}\n\t\t\t\t\t\td='M18 2.0845\n\t\t\t\t\t\t\ta 15.9155 15.9155 0 0 1 0 31.831\n\t\t\t\t\t\t\ta 15.9155 15.9155 0 0 1 0 -31.831'\n\t\t\t\t\t/>\n\t\t\t\t\t<text x='18' y='20.35' class={`percentage ${this.getGrade()}`}>\n\t\t\t\t\t\t{`${this.getPercentage()}%`}\n\t\t\t\t\t</text>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\"\n\nclass Cards extends React.Component{\n  render(){\n    return (\n\t\t\t<div className=\"cards\">\n\t\t\t\t{this.props.results.map(result => <Card result={result} />)}\n\t\t\t</div>\n\t\t);\n  }\n}\n\nexport default Cards","import React from \"react\";\nimport \"./App.css\";\nimport results from \"./grade_code\"\nimport Cards from \"./Cards\"\n\nclass App extends React.Component {\n\trender() {\n\t\tconsole.log(results);\n\t\treturn (\n\t\t\t<div style={{ background: \"rgb(55, 55, 55)\" }}>\n\t\t\t\t<Cards results={results} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<App name='ankon' number='12' roll='1' />,\n\tdocument.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}